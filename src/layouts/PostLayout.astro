---
import uiIcons from '@assets/uiIcons';
import BaseLayout from '@layouts/BaseLayout.astro';
import { formatDate } from '@utils/formatDate';
import { readingTime } from '@utils/readingTime';
import { type CollectionEntry, render } from 'astro:content';

interface Props {
  post: CollectionEntry<'blog'> | CollectionEntry<'projects'>;
}

const { post } = Astro.props;

const { Content } = await render(post);

const imageUrl =
  typeof post.data.image === 'string'
    ? post.data.image
    : post.data.image?.src || '';

const ogUrl = `/${post.collection}/${post.id}.webp`;

const repoUrl = post.data?.repoUrl;
const demoUrl = post.data?.demoUrl;

const postLayoutProps = {
  canonicalURL: post.data.canonicalURL,
  title: post.data.title,
  ogImage: ogUrl,
  author: post.data.author,
  pubDatetime: post.data.pubDatetime,
  modDatetime: post.data.modDatetime,
};
---

<BaseLayout {...postLayoutProps}>
  <a href={`/${post.collection}`} id="back-to-prev" class="btn">
    <Fragment set:html={uiIcons.arrowLeft} />
    Back to {post.collection}
  </a>

  <header class="post-header">
    <div class="post-details">
      <time
        datetime={(
          post.data.modDatetime || post.data.pubDatetime
        ).toISOString()}
      >
        {
          post.data.modDatetime
            ? `Upd: ${formatDate(post.data.modDatetime)}`
            : formatDate(post.data.pubDatetime)
        }
      </time>
      {
        post.body && (
          <>
            <span class="divider">/</span>
            <div class="post-reading-time">{readingTime(post.body)}</div>
          </>
        )
      }
    </div>
    <h1 class="post-title">{post.data.title}</h1>
    {
      (repoUrl || demoUrl) && (
        <div class="post-links">
          {demoUrl && (
            <a href={demoUrl} class="styled-link demo-link">
              demo
            </a>
          )}
          <span>/</span>
          {repoUrl && (
            <a href={repoUrl} class="styled-link repo-link">
              repo
            </a>
          )}
        </div>
      )
    }

    {
      imageUrl && (
        <img
          loading="lazy"
          decoding="async"
          width="752"
          height="420"
          src={imageUrl}
          alt={post.data.title}
          class="post-img"
        />
      )
    }

    <article>
      <section class="article"><Content /></section>
    </article>
  </header>

  <style>
    #back-to-prev {
      display: inline-flex;
      gap: var(--px-8);
      margin-bottom: var(--px-40);
    }

    #back-to-prev :global(svg) {
      height: var(--px-16);
    }

    .post-details {
      display: flex;
      gap: var(--px-6);
      margin-bottom: var(--px-6);
    }

    .post-title {
      margin-bottom: var(--px-8);
      font-size: clamp(
        calc(var(--text-lg) * 1.75),
        2.5vw + var(--text-lg),
        calc(var(--text-lg) * 2.22222)
      );
      line-height: var(--leading-heading);
      font-weight: 600;
    }

    .post-links {
      margin-bottom: var(--px-32);
    }

    .post-img {
      object-fit: cover;
      border-radius: var(--radius-on-surface);
      background-color: var(--on-surface-content);
      transition: opacity var(--transition-base);
    }
  </style>

  <script is:inline>
    function setupPageElements() {
      // Handle tables
      const tables = document.querySelectorAll('.article table');
      tables.forEach(table => {
        // Check if table is already wrapped
        if (table.parentElement?.classList.contains('table-wrapper')) return;

        const wrapper = document.createElement('div');
        wrapper.className = 'table-wrapper';
        table.parentNode?.insertBefore(wrapper, table);
        wrapper.appendChild(table);
      });

      // Handle code blocks
      const codeBlocks = document.querySelectorAll('.article pre');
      codeBlocks.forEach(codeBlock => {
        if (codeBlock.parentElement?.classList.contains('code-block-wrapper'))
          return;

        // Create wrapper
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper';

        codeBlock.setAttribute('tabindex', '0');

        // Create copy button
        const copyButton = document.createElement('button');
        copyButton.className = 'btn copy-button';
        copyButton.setAttribute('aria-label', 'Copy code');

        const iconCopy = `<svg class="copy-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect><path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path></svg>`;
        const iconSuccess = `<svg class="success-icon" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="20 6 9 17 4 12"></polyline></svg>`;

        // Copy and success icons
        copyButton.innerHTML = `<div class="icon-container">${iconCopy}${iconSuccess}</div>`;

        // Wrap the code block
        codeBlock.parentNode?.insertBefore(wrapper, codeBlock);
        wrapper.appendChild(codeBlock);
        wrapper.appendChild(copyButton);

        // Copy functionality
        let timeout;
        copyButton.addEventListener('click', async () => {
          if (timeout) clearTimeout(timeout);

          const codeElement = codeBlock.querySelector('code');

          if (!codeElement) return;

          // Remove line numbers and copy only the code
          const text = Array.from(codeElement.querySelectorAll('.line'))
            .map(line => line.textContent?.replace(/^\d+\s*\|\s*/, '') || '')
            .join('\n');

          await navigator.clipboard.writeText(text);
          copyButton.classList.add('success');

          timeout = setTimeout(() => {
            copyButton.classList.remove('success');
          }, 1000);
        });
      });
    }

    setupPageElements();
  </script>

  <style is:inline>
    .table-wrapper {
      width: 100%;
      margin-block: var(--px-16);
      font-size: var(--px-16);
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
      padding-block: var(--px-8);
    }

    .code-block-wrapper {
      position: relative;
      margin-bottom: var(--px-16);
      font-size: var(--px-16);
    }

    .copy-button {
      position: absolute;
      top: var(--px-8);
      right: var(--px-8);
      width: var(--px-32);
      height: var(--px-32);
      padding: var(--px-4);
      border-radius: var(--radius-on-surface);
      background-color: var(--surface-light);
      opacity: 0.8;
      transition: all var(--transition-base);
      z-index: var(--z-50);
    }

    /* Copy button hover - desktop only */
    @media (hover: hover) and (pointer: fine) {
      .copy-button:hover {
        opacity: 1;
        background-color: var(--surface-light);
      }
    }

    /* Copy button touch states */
    @media (hover: none) {
      /* Disable hover effects on touch */
      .copy-button:hover {
        opacity: 0.8;
        background-color: var(--surface-light);
      }
    }

    .copy-button .icon-container {
      position: relative;
      width: var(--px-18);
      height: var(--px-18);
    }

    .copy-button svg {
      position: absolute;
      top: 50%;
      left: 50%;
      color: var(--text-light);
      transform: translate(-50%, -50%);
      transition: all var(--transition-base);
    }

    .copy-button .success-icon {
      opacity: 0;
    }

    .copy-button.success .copy-icon {
      opacity: 0;
    }

    .copy-button.success .success-icon {
      opacity: 1;
    }
  </style>
</BaseLayout>
